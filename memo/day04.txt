쿠키(Cookie)
웹 서버에서 클라이언트에게 전송해주는 작은 데이터 조각이며, 사용자의 웹 브라우저에
저장된다.
서버에서 관리하지 않기 때문에 서버의 부담이 줄어들지만 클라이언트에 저장되는 정보이기 때문에
보안상 문제가 발생할 수 있다.
클라이언트 쪽에서 쿠키를 삭제하지 않으면 쿠키는 정해진 시간동안 계속 유지된다.

요즘은 클라이언트의 브라우저에서 쿠키 허용 여부를 체크하므로 허용하지 않으면 쿠키로 구현한
서비스는 무용지물이 될 때가 많다.

쿠키 동작 방식
1. 클라이언트가 서버에 요청을 보낸다.
2. 웹 서버에서 쿠키를 생성하여 클라이언트에게 응답을 보낸다.
3. 브라우저가 쿠키를 저장한다.
4. 이후 같은 서버로 요청을 보내게 되면 요청에 쿠키를 담아서 보낸다.
5. 서버는 해당 쿠키에서 필요한 데이터를 꺼내서 사용한다.

쿠키 생성, 사용
1. 쿠키를 생성, 응답에 담기
	Cookie cookie = new Cookie("쿠키이름","쿠키값");
	cookie.setMaxAge(60 * 60 *24); // 쿠키의 유효 기간(초단위 작성)
	//만약 쿠키 유효기간을 설정하지 않으면 브라우저 종료시 삭제된다.

	resp.addCookie(cookie);

2. 쿠키 유무 확인, 쿠키의 데이터 가져오기
	String cookieString = req.getHeader("Cookie");
	//쿠키에 저장된 값을 문자열 형태로 가져옴
	// ex) "name=홍길동;age=22;gender=M"


	Cookie[] cookies = req.getCookies();
	//쿠키를 배열 형태로 가져옴

	if(cookies != null){
		for(Cookie cookie : cookies){
			cookie.getName();
			cookie.getValue();
		}
	}

3. 쿠키 삭제
	cookie.setMaxAge(0);
	resp.addCookie(cookie);



세션(Session)
세션은 클라이언트가 서버에 요청을 보내면 자동으로 생성되며, 서버에서 세션의
유효기간을 따로 설정하지 않았다면 브라우저를 종료할 때 자동으로 삭제된다.
서버는 클라이언트들의 상태를 각각의 세션을 통해 저장하고 클라이언트가 요청을 보낼 시
요청에 세션ID가 저장된 쿠키를 같이 전달하여 서버의 세션ID와 일치하는 세션을 찾아 구분한다.

세션의 동작 방식
1. 클라이언트가 서버에 요청을 보낸다.
2. 서버는 클라이언트를 식별할 수 있는 세션ID를 발급한다.
3. 세션ID를 클라이언트에게 쿠키로 전송한다.
4. 이후 클라이언트는 요청을 보낼 때마다 세션ID를 담은 쿠키를 같이 보낸다.
5. 서버에서는 쿠키의 세션ID와 서버의 세션ID가 같은 것을 찾아 사용자를 식별한다.
6. 그 외에도 세션에 데이터를 저장하여 사용할 수 있다.

세션의 사용
1. 세션 얻어오기
	// 현재 요청에 대한 세션을 얻어온다.
	HttpSession session = req.getSession();

2. 세션에 데이터 저장하기
	session.setAttribute("키", "값");

3. 세션에 저장된 데이터 가져오기
	String value = (String)session.getAttribute("키"); 
				//반환타입은 Object

4. 세션에 저장된 데이터 지우기
	session.removeAttribute("키");

5. 세션 초기화(종료)
	session.invalidate();
























